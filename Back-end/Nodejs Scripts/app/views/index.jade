extends layout

block head
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(rel='stylesheet', href='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css')
    link(rel='stylehseet', href='http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.Default.css')
    link(rel='stylesheet', href='http://leaflet.github.io/Leaflet.markercluster/dist/MarkerCluster.css')
    link(rel='stylesheet', href='http://k4r573n.github.io/leaflet-control-osm-geocoder/Control.OSMGeocoder.css')
    link(rel='stylesheet', href='css/style.css')

block body
    #map(style='width: 800px; height: 600px')
    script(src='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js')
    script(src='http://leaflet.github.io/Leaflet.markercluster/dist/leaflet.markercluster-src.js')
    script(src='http://k4r573n.github.io/leaflet-control-osm-geocoder/Control.OSMGeocoder.js')
    script(src='js/pointsFunctions.js')
    
block script
    script.
      // markers layer
      var markers = new L.markerClusterGroup({
        iconCreateFunction: function(cluster) {
          return L.divIcon({ html: '<b>' + cluster.getChildCount() + '</b>', className: 'myCluster', iconSize: L.point(20, 20) });
        }
      });

      // doctors layer
      var doctors = new L.LayerGroup();

      var jsonArray = !{JSON.stringify(jsonData)};
      var points = buildPoints(jsonArray);

      // adds points to markers layer and doctors layer
      updatePoints(points);

      // credits layer
      var mbAttr = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                   '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                   'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
          mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6IjZjNmRjNzk3ZmE2MTcwOTEwMGY0MzU3YjUzOWFmNWZhIn0.Y8bhBaUMqFiPrDRW9hieoQ';
      
      // grayscale and streets layer
      var grayscale   = L.tileLayer(mbUrl, {id: 'mapbox.light', attribution: mbAttr}),
          streets  = L.tileLayer(mbUrl, {id: 'mapbox.streets',   attribution: mbAttr});
      
      // map layer
      var map = L.map('map', {
        center: [30.2837, -97.7326],
        zoom: 10,
        layers: [grayscale, doctors]
      });
      
      // base layers options
      var baseLayers = {
        "Grayscale": grayscale,
        "Streets": streets
      };
      
      // overlays option
      var overlays = {
        "Doctors": doctors
      };

      L.control.layers(baseLayers, overlays).addTo(map);

      // geocoder layer
      var osmGeocoder = new L.Control.OSMGeocoder({
        collapsed: false,
        position: 'bottomright',
        text: 'Locate',
      });

      map.addControl(osmGeocoder);